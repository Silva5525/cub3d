/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   mini_map_drawing.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mgering <mgering@student.42heilbronn.de    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/02/20 19:58:17 by mgering           #+#    #+#             */
/*   Updated: 2025/02/20 20:02:41 by mgering          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

static void	draw_tile(t_c *cub, int dest_x, int dest_y, uint32_t color)
{
	int	px;
	int	py;

	py = 0;
	while (py < MINIMAP_TILE_SIZE)
	{
		px = 0;
		while (px < MINIMAP_TILE_SIZE)
		{
			mlx_put_pixel(cub->mini_map, dest_x + px, dest_y + py, color);
			px++;
		}
		py++;
	}
}

static char	get_map_char(t_c *cub, int x, int y)
{
	if (y < 0 || y >= cub->map_height || !cub->map[y])
		return ('1');
	if (x < 0 || x >= (int)ft_strlen(cub->map[y]))
		return ('1');
	return (cub->map[y][x]);
}

static void	draw_minimap_tiles(t_c *cub, int start_tile_x, int start_tile_y,
	int view_tile_w, int view_tile_h)
{
int		tile_x;
int		tile_y;
int		map_x;
int		map_y;
uint32_t	color;

tile_y = 0;
while (tile_y < view_tile_h)
{
	tile_x = 0;
	while (tile_x < view_tile_w)
	{
		map_x = start_tile_x + tile_x;
		map_y = start_tile_y + tile_y;
		if (get_map_char(cub, map_x, map_y) == '1')
			color = 0x0000009E;
		else
			color = 0x80809E9E;
		draw_tile(cub, tile_x * MINIMAP_TILE_SIZE,
			tile_y * MINIMAP_TILE_SIZE, color);
		tile_x++;
	}
	tile_y++;
}
}


static void	draw_minimap_player(t_c *cub, int start_tile_x, int start_tile_y,
	float player_tile_x, float player_tile_y)
{
int		p_size;
int		px;
int		py;
int		draw_x;
int		draw_y;

p_size = MINIMAP_TILE_SIZE / 2;
draw_x = (int)((player_tile_x - start_tile_x) * MINIMAP_TILE_SIZE) - p_size / 2;
draw_y = (int)((player_tile_y - start_tile_y) * MINIMAP_TILE_SIZE) - p_size / 2;
py = 0;
while (py < p_size)
{
	px = 0;
	while (px < p_size)
	{
		if (draw_x + px >= 0 && draw_x + px < MINIMAP_WIDTH &&
			draw_y + py >= 0 && draw_y + py < MINIMAP_HEIGHT)
			mlx_put_pixel(cub->mini_map, draw_x + px, draw_y + py, 0xFF0000FF);
		px++;
	}
	py++;
}
}

void	draw_minimap(t_c *cub)
{
	float	player_tile_x;
	float	player_tile_y;
	int		view_tile_w;
	int		view_tile_h;
	int		start_tile_x;
	int		start_tile_y;

	clear_img(cub->mini_map);
	view_tile_w = MINIMAP_WIDTH / MINIMAP_TILE_SIZE;
	view_tile_h = MINIMAP_HEIGHT / MINIMAP_TILE_SIZE;
	player_tile_x = cub->player.pos.x / TILE_SIZE;
	player_tile_y = cub->player.pos.y / TILE_SIZE;
	start_tile_x = (int)player_tile_x - view_tile_w / 2;
	start_tile_y = (int)player_tile_y - view_tile_h / 2;
	if (start_tile_x < 0)
		start_tile_x = 0;
	if (start_tile_y < 0)
		start_tile_y = 0;
	if (start_tile_x + view_tile_w > cub->map_width)
		start_tile_x = cub->map_width - view_tile_w;
	if (start_tile_y + view_tile_h > cub->map_height)
		start_tile_y = cub->map_height - view_tile_h;
	draw_minimap_tiles(cub, start_tile_x, start_tile_y, view_tile_w, view_tile_h);
	draw_minimap_player(cub, start_tile_x, start_tile_y, player_tile_x, player_tile_y);
}
